// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/migrate-shadow
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String
  password  String  
  createdAt DateTime @default(now())
  favorites     Favorite[]
  inventory     Inventory[]
  category      Category[]
  cocktail      Cocktail[]
}

model Favorite {
  id         String   @id @default(uuid())
  User       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  cocktail   Cocktail @relation(fields: [cocktailId], references: [idDrink], onDelete: Cascade)
  cocktailId String
  categories CategoriesOnFavorite[]

  @@unique([userId, cocktailId])
}

model CategoriesOnFavorite {
  id         String   @id @default(uuid())
  favorite   Favorite @relation(fields:[favoriteId], references:[id], onDelete: Cascade)
  favoriteId String
  category   Category @relation(fields:[categoryId], references: [id], onDelete: Cascade)
  categoryId String

  @@unique([favoriteId, categoryId])
}

model Category {
  id             String   @id @default(uuid())
  name           String
  user           User @relation(fields:[userId], references: [id], onDelete: Cascade)
  userId         Int
  favorites      CategoriesOnFavorite[]
  
  @@unique([userId, name])
}

model Inventory {
  id             String     @id @default(uuid())
  User           User       @relation(fields: [userId], references: [id])
  userId         Int
  ingredient     Ingredient @relation(fields: [nameIngredient], references: [strIngredient])
  nameIngredient String

  @@unique([userId, nameIngredient])
}

model Ingredient {
  idIngredient   String      @id @default(uuid())
  strIngredient  String      @unique
  strDescription String?
  strType        String?
  strAlcohol     String?
  strABV         String?
  inventory      Inventory[]
}


model Cocktail {
  idDrink                     String     @id @default(uuid())
  strDrink                    String     @unique
  strDrinkAlternate           String?
  strTags                     String?
  strVideo                    String?
  strCategory                 String?
  strIBA                      String?
  strAlcoholic                String?
  strGlass                    String?
  strInstructions             String?
  strInstructionsES           String?
  strInstructionsDE           String?
  strInstructionsFR           String?
  strInstructionsIT           String?
  strInstructionsZHHANS       String?
  strInstructionsZHHANT       String?
  strDrinkThumb               String?
  strIngredient1              String?
  strIngredient2              String?
  strIngredient3              String?
  strIngredient4              String?
  strIngredient5              String?
  strIngredient6              String?
  strIngredient7              String?
  strIngredient8              String?
  strIngredient9              String?
  strIngredient10             String?
  strIngredient11             String?
  strIngredient12             String?
  strIngredient13             String?
  strIngredient14             String?
  strIngredient15             String?
  strMeasure1                 String?
  strMeasure2                 String?
  strMeasure3                 String?
  strMeasure4                 String?
  strMeasure5                 String?
  strMeasure6                 String?
  strMeasure7                 String?
  strMeasure8                 String?
  strMeasure9                 String?
  strMeasure10                String?
  strMeasure11                String?
  strMeasure12                String?
  strMeasure13                String?
  strMeasure14                String?
  strMeasure15                String?
  strImageSource              String?
  strImageAttribution         String?
  strCreativeCommonsConfirmed String?
  dateModified                String?
  User                        User? @relation(fields: [userId], references: [id])
  userId                      Int?
  Favorite                    Favorite[]
}
